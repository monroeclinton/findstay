// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model StaySync {
    id           String             @id @default(cuid())
    airbnbSync   AirbnbLocationSync @relation(fields: [airbnbSyncId], references: [id])
    airbnbSyncId String
    params       StaySyncParams     @relation(fields: [paramsId], references: [id])
    paramsId     String             @unique
    createdAt    DateTime           @default(now())
    updatedAt    DateTime           @updatedAt

    @@map("stay_sync")
}

model StaySyncParams {
    id            String   @id @default(cuid())
    location      String
    stayMaxPrice  String
    poiMinRating  String
    poiMinReviews String
    neBBox        Unsupported("geometry(Point, 4326)")
    neLatitude    Decimal
    neLongitude   Decimal
    swBBox        Unsupported("geometry(Point, 4326)")
    swLatitude    Decimal
    swLongitude   Decimal
    sync          StaySync?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    @@map("stay_sync_params")
}

model AirbnbLocation {
    id              String                   @id @default(cuid())
    airbnbId        String                   @unique
    name            String
    price           Int
    images          String[]
    rating          Decimal?
    ratingCount     Decimal?
    ratingLocalized String
    latitude        Decimal
    longitude       Decimal
    pages           AirbnbLocationsOnPages[]
    airbnbFavorites AirbnbLocationFavorite[]
    createdAt       DateTime                 @default(now())
    updatedAt       DateTime                 @updatedAt

    @@map("airbnb_location")
}

model AirbnbApi {
    id          String                               @id @default(cuid())
    apiKey      String
    createdAt   DateTime                             @default(now())
    updatedAt   DateTime                             @updatedAt

    @@map("airbnb_api")
}

model AirbnbLocationSync {
    id          String                               @id @default(cuid())
    search      String
    priceMax    Int?
    apiKey      String
    cursors     String[]
    pages       AirbnbLocationSyncPage[]
    neBBox      Unsupported("geometry(Point, 4326)")
    neLatitude  Decimal
    neLongitude Decimal
    swBBox      Unsupported("geometry(Point, 4326)")
    swLatitude  Decimal
    swLongitude Decimal
    syncs       StaySync[]
    createdAt   DateTime                             @default(now())
    updatedAt   DateTime                             @updatedAt

    @@map("airbnb_location_sync")
    @@index([neBBox], type: Gist)
    @@index([swBBox], type: Gist)
}

model AirbnbLocationSyncPage {
    id        String                   @id @default(cuid())
    cursor    String
    syncId    String
    sync      AirbnbLocationSync       @relation(fields: [syncId], references: [id], onDelete: Cascade)
    locations AirbnbLocationsOnPages[]
    createdAt DateTime                 @default(now())
    updatedAt DateTime                 @updatedAt

    @@map("airbnb_location_sync_page")
}

model AirbnbLocationsOnPages {
    location   AirbnbLocation @relation(fields: [locationId], references: [id])
    locationId String
    page       AirbnbLocationSyncPage @relation(fields: [pageId], references: [id])
    pageId     String

    @@map("airbnb_locations_on_pages")
    @@id([locationId, pageId])
}

model AirbnbLocationFavorite {
    id         String                       @id @default(cuid())
    location   AirbnbLocation               @relation(fields: [locationId], references: [id])
    locationId String
    user       User                         @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String
    folder     AirbnbLocationFavoriteFolder @relation(fields: [folderId], references: [id], onDelete: Cascade)
    folderId String

    @@map("airbnb_location_favorite")
    @@unique([locationId, userId, folderId])
}

model AirbnbLocationFavoriteFolder {
    id        String                   @id @default(cuid())
    user      User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    favorites AirbnbLocationFavorite[]
    name      String

    @@map("airbnb_location_favorite_folder")
}

model GoogleMapsLocation {
    id         String                               @id @default(cuid())
    syncId     String
    sync       GoogleMapsSync                       @relation(fields: [syncId], references: [id], onDelete: Cascade)
    name       String
    type       String
    reviews    Int
    stars      Decimal
    hex        String                               @unique
    uri        String
    link       String
    coordinate Unsupported("geometry(Point, 4326)")
    latitude   Decimal
    longitude  Decimal
    createdAt  DateTime                             @default(now())
    updatedAt  DateTime                             @updatedAt

    @@map("google_maps_location")
}

model GoogleMapsSync {
    id         String   @id @default(cuid())
    search     String
    coordinate Unsupported("geometry(Point, 4326)")
    latitude   Decimal
    longitude  Decimal
    locations  GoogleMapsLocation[]
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("google_maps_sync")
}

model NominatimSearch {
    id         String   @id @default(cuid())
    search     String
    latitude   Decimal
    longitude  Decimal
    neLatitude  Decimal
    neLongitude Decimal
    swLatitude  Decimal
    swLongitude Decimal
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    @@map("nominatim_search")
}

model Invoice {
    id         String @id @default(cuid())
    txId       String @unique
    email      String
    paid       Boolean @default(false)
    createdAt  DateTime @default(now())

    @@map("billing_invoice")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("account")
    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("session")
}

model User {
    id                    String                        @id @default(cuid())
    name                  String?
    email                 String?                       @unique
    emailVerified         DateTime?
    image                 String?
    accounts              Account[]
    sessions              Session[]
    airbnbFavorites       AirbnbLocationFavorite[]
    airbnbFavoriteFolders AirbnbLocationFavoriteFolder[]

    @@map("user")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@map("verification_token")
    @@unique([identifier, token])
}
